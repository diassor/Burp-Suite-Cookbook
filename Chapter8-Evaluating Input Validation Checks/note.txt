Chapter 8. Evaluating Input Validation Checks

In this chapter, we will cover the following recipes:

    Testing for reflected cross-site scripting
    Testing for stored cross-site scripting
    Testing for HTTP verb tampering
    Testing for HTTP Parameter Pollution
    Testing for SQL injection
    Testing for command injection


Introduction

    Failure to validate any input received from the client before using it in the application code is one of the most common
    security vulnerabilities found in web applications.

    This flaw is the source for major security issues, such as SQL injection and cross-site scripting (XSS).
    Web-penetration testers must evaluate and determine whether any input is reflected back or executed upon by the
    application.
        We'll learn how to use Burp to perform such tests.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for reflected cross-site scripting

Reflected cross-site scripting occurs when malicious JavaScript
is injected into an input field, parameter, or header and, after
returning from the web server, is executed within the browser.

Reflected XSS occurs when the execution of the JavaScript reflects in the browser only and is not a permanent part of the
web page.
Penetration testers need to test all client values sent to the web server to determine whether XSS is possible.

Getting ready

    Using OWASP Mutillidae II, let's determine whether the application protects against reflected cross-site scripting (XSS).


How to do it...

    1=  From the OWASP Mutilliae II menu, select Login by
        navigating to OWASP 2017 | A7 - Cross Site Scripting (XSS) | Reflected (First Order) | Pen Test Tool Lookup:

    2=  Select a tool from the drop-down listing and click the
        Lookup Tool button.
        Any value from the drop-down list will work for this recipe:

    3=  Switch to Burp Proxy | HTTP history and find the HTTP
        message you just created by selecting the lookup tool.
        Note that in the request is a parameter called ToolID. In the following example, the value is 3:

    4=  Flip over to (revolotear hacia)the Response tab and note
        the JSON returned from the request.
        You can find the JavaScript function in the response more easily by typing (PenTest) in the search box at the bottom.
        Note that the tool_id is reflected in a response parameter called toolIDRequested.
            This may be an attack vector for XSS:

    5=  Send the request over to Repeater.
        Add an XSS payload within the ToolID parameter immediately following the number.
        Use a simple payload such as <script>alert(1);</script>:

    6=  Click Go and examine the returned JSON response,
        searching for PenTest.
        Notice our payload is returned exactly as inputted.
        It looks like the developer is not sanitizing any of the input data before using it.
        Let's exploit the flaw:
            var gPenTestToolsJSONString = '{"query": {"toolIDRequested": "3<script>alert(1);</script>", "penTestTools":

    7=  Since we are working with JSON instead of HTML, we will
        need to adjust the payload to match the structure of the
        JSON returned.
        We will fool the JSON into thinking the payload is legitimate.
        We will modify the original <script>alert(1);</script> payload to "}} )%3balert(1)%3b// instead.

    8=  Switch to the Burp Proxy | Intercept tab.
        Turn Interceptor on with the button Intercept is on.

    9=  Return to Firefox, select another tool from the drop-down
        list, and click the Lookup Toolbutton.

    10=  While Proxy | Interceptor has the request paused,
         insert the new payload of
         "}} )%3balert(1)%3b//
         immediately after the Tool ID number:

    11=  Click the Forward button.
         Turn Interceptor off by toggling to Intercept is off.

    12=  Return to the Firefox browser and see the pop-up alert
         box displayed.
         You've successfully shown a proof of concept (PoC) for the reflected XSS vulnerability:



How it works...

    Due to inadequate input cleansing prior to using data received from the client.
    In this case, the penetration testing tools identifier is reflected in the response as it is received from the client,
    allowing an attack vector for an XSS attack.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for stored cross-site scripting

Stored cross-site scripting occurs when malicious JavaScript is
injected into an input field, parameter, or header and, after
returning from the web server,
is executed within the browser and becomes a permanent part of the page.
Stored XSS occurs when the malicious JavaScript is stored in the database and is used later to populate the display of a web page.
Penetration testers need to test all client values sent to the web server to determine whether XSS is possible.


Getting ready

    Using OWASP Mutillidae II, let's determine whether the application protects against stored cross-site scripting.


How to do it...

    1=  From the OWASP Mutilliae II menu, select Login by
        navigating to OWASP 2013 | A7 - Cross Site Scripting (XSS) | Persistent (Second Order) | Add to your blog:


    2=  Place some verbiage into the text area.
        Before clicking the Save Blog Entry button,
        let's try a payload with the entry:

    3=  Switch to the Burp Proxy | Intercept tab.
        Turn Interceptor on with the button Intercept is on.

    4=  While Proxy | Interceptor has the request paused,
        insert the new payload of <script>alert(1);</script>
        immediately following the verbiage you added to the blog:

    5=  Click the Forward button.
        Turn Interceptor off by toggling to Intercept is off

    6=  Return to the Firefox browser and see the pop-up alert
        box displayed:

    7=  Click the OK button to close the pop-ups.
        Reload the page and you will see the alert pop-up again.

        This is because your malicious script has become a permanent part of the page.
        You've successfully shown a proof of concept (PoC) for the stored XSS vulnerability!


How it works...

    Stored or persistent XSS occurs because the application not only neglects to sanitize the input but also stores the input within the database.
    Therefore, when a page is reloaded and populated with database data, the malicious script is executed along with
    that data.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for HTTP verb tampering

HTTP requests can include methods beyond GET and POST.
As a penetration tester, it is important to determine which other HTTP verbs (that is, methods) the web server allows.

Support for other verbs may disclose sensitive information (for example, TRACE) or allow for a dangerous invocation of
application code (for example, DELETE).
Let's see how Burp can help test for HTTP verb tampering.



Getting ready

    Using OWASP Mutillidae II, let's determine whether the application allows HTTP verbs beyond GET and POST.


How to do it...

    1=  Navigate to the homepage of OWASP Mutillidae II.

    2=  Switch to Burp Proxy | HTTP history and look for the
        HTTP request you just created while browsing to the homepage of Mutillidae.
        Note the method used is GET. Right-click and send the request to Intruder:

    3=  In the Intruder | Positions tab, clear all suggested
        payload markers.
        Highlight the GET verb, and click the Add $ button to place payload markers around the verb:
            §GET§ /mutillidae/index.php?page=home.php&popUpNotificationCode=HPH0 HTTP/1.1

    4=  In the Intruder | Payloads tab, add the following
        values to the Payload Options [Simple list] text box:

        OPTIONS
        HEAD
        POST
        PUT
        DELETE
        TRACE
        TRACK
        CONNECT
        PROPFIND
        PROPPATCH
        MKCOL
        COPY

    5=  Uncheck the Payload Encoding box at the bottom of the
        Payloads page and then click the Start attack button.

    6=  When the attack results table appears, and the attack is
        complete,
        note all of the verbs returning a status code of 200.

        This is worrisome(inquietante) as most web servers should not be supporting so many verbs.
        In particular, the support for TRACE and TRACK would be included in the findings and final report as
        vulnerabilities:


How it works...

    Testing for HTTP verb tampering includes sending requests
    against the application using different HTTP methods and
    analyzing the response received.
    Testers need to determine whether a status code of 200 is returned for any of the verbs tested,
    indicating the web server allows requests of this verb type.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for HTTP Parameter Pollution

HTTP Parameter Pollution (HPP) is an attack in which multiple HTTP parameters are sent to the web server with the same name.

The intention is to determine whether the application responds in an unanticipated manner, allowing exploitation.
    For example, in a GET request, additional parameters can be added to the query string—in this fashion:
        “&name=value”—where name is a duplicate parameter name already known by the application code.

Likewise(igualmente), HPP attacks can be performed on POST requests by duplicating a parameter name in the POST body data.


Getting ready

    Using OWASP Mutillidae II, let's determine whether the application allows HPP attacks.


How to do it...

    1=  From the OWASP Mutilliae II menu, select Login by
        navigating to OWASP 2017 | A1 - Injection (Other) | HTTP Parameter Pollution | Poll Question:

    2=  Select a tool from one of the radio buttons,
        add your initials,
        and click the Submit Vote button:

    3=  Switch to the Burp Proxy | HTTP history tab,
        and find the request you just performed from the User Poll page.
        Note the parameter named choice.
        The value of this parameter is BurpSuite.
         Right-click and send this request to Repeater:

    4=  Switch to the Burp Repeater and add another parameter
        with the same name to the query string.
        Let's pick another tool from the User Poll list and append it to the query string,
            for example, “&choice=tcpdump”.
                Click Go to send the request:

    5=  Examine the response.
        Which choice did the application code accept?
        This is easy to find by searching for the Your choice was string.
        Clearly, the duplicate choice parameter value is the one the application code accepted to count in the User Poll vote:


How it works...

    The application code fails to check against multiple parameters with the same name when passed into a function.

    The result is that the application usually acts upon the last parameter match provided.
    This can result in odd behavior and unexpected results.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for SQL injection


A SQL injection attack involves an attacker providing input to the database,
which is received and used without any validation or sanitization.
The result is divulging sensitive data, modifying data, or even bypassing authentication mechanisms.


Getting ready

    Using the OWASP Mutillidae II Login page, let's determine whether the application is vulnerable to SQL injection (SQLi) attacks.

How to do it...

    1=  From the OWASP Mutilliae II menu, select Login by
        navigating to OWASP 2017 | A1-Injection (SQL) | SQLi – Bypass Authentication | Login:

    2=  At the Login screen, place invalid credentials into the
        username and password text boxes.
            For example,
                username is tester and
                password is tester.
        Before clicking the Login button, let's turn on Proxy | Interceptor.

    3=  Switch to the Burp Proxy | Intercept tab.
        Turn the Interceptor on by toggling to Intercept is on.

    4=  While Proxy | Interceptor has the request paused,
        insert the new payload of (username=tester)
            ' or 1=1--<space>
        within the username parameter and click the Login button:

    5=  Click the Forward button.
        Turn Interceptor off by toggling to Intercept is off.

    6=  Return to the Firefox browser and note you are now
        logged in as admin!


How it works...

    The tester account did not exist in the database;
    however, the ' or 1=1--<space> payload resulted in bypass the authentication mechanism because the SQL code
    constructed the query based on unsanitized user input.

    The account of admin is the first account created in the database,
    so the database defaulted to that account.


        There's more...

        We used a SQLi wordlist from wfuzz within Burp Intruder to test many different payloads within the same username
        field.
        Examine the response for each attack in the results table to determine whether the payload successfully performed a SQL injection.


    The construction of SQL injection payloads requires some knowledge of the backend database and the particular syntax required.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for command injection

Command injection involves an attacker attempting to invoke a
system command, normally performed at a terminal session,
within an HTTP request instead.

Many web applications allow system commands through the UI for troubleshooting (solucion de problemas) purposes.

A web-penetration tester must test whether the web page allows further commands on the system that should normally be restricted.


Getting ready

For this recipe, you will need the SecLists Payload for Unix commands:

    SecLists-master | Fuzzing | FUZZDB_UnixAttacks.txt

        Download from GitHub: https://github.com/danielmiessler/SecLists


    Using the OWASP Mutillidae II DNS Lookup page, let's determine whether the application is vulnerable to command injection attacks.


How to do it...

    1=  From the OWASP Mutilliae II menu, select DNS Lookup by
        navigating to OWASP 2017 | A1-Injection (Other) | Command Injection | DNS Lookup:

    2=  On the DNS Lookup page,
        type the IP address 127.0.0.1 in the text box and click the Lookup DNS button:

    3=  Switch to the Burp Proxy | HTTP history tab and look for
        the request you just performed.
            Right-click on Send to Intruder:

    4=  In the Intruder | Positions tab, clear all suggested
        payload markers with the Clear $ button.
        In the target_host parameter,
            place a pipe symbol (|)
            immediately following the
            127.0.0.1 IP address.
        After the pipe symbol, place an X.

        Highlight the X and click the Add $ button to wrap the X with payload markers:
            target_host=127.0.0.1|§x§

    5=  In the Intruder | Payloads tab,
        click the Load button.
        Browse to the location where you downloaded the
            SecLists-master wordlists from GitHub.
        Navigate to the location of the
            FUZZDB_UnixAttacks.txt
        wordlist and use the following to populate the
        Payload Options [Simple list]
            box: SecLists-master |Fuzzing|  FUZZDB_UnixAttacks.txt

    6=  Uncheck the Payload Encoding box at the bottom of the
        Payloads tab page and then click the Start Attack button.

    7=  Allow the attack to continue until you reach payload 50.
        Notice the responses through the
        Render tab around payload 45 or so.

        We are able to perform commands,
            such as id, on the operating system,
        which displays the results of the commands on the web page:


How it works...

    Failure to define and validate user input against an acceptable list of system commands can lead to command
    injection vulnerabilities.
    In this case, the application code does not confine system
    commands available through the UI, allowing visibility and execution of commands on the operating system that should be
    restricted.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
