Chapter 9. Attacking the Client

In this chapter, we will cover the following recipes:

    Testing for Clickjacking
    Testing for DOM-based cross-site scripting
    Testing for JavaScript execution
    Testing for HTML injection
    Testing for client-side resource manipulation


Introduction

    Code available on the client that is executed in the browser requires testing to determine any presence of sensitive
    information or the allowance of user input without server-side validation.
        Learn how to perform these tests using Burp.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for Clickjacking

Clickjacking is also known as the UI redress attack.(ataque de reparacion)

This attack is a deceptive technique that tricks a user into interacting with a transparent iframe and, potentially, send
unauthorized commands or sensitive information to an attacker-controlled website.
Let's see how to use the Burp Clickbandit to test whether a site is vulnerable to Clickjacking.


Getting ready

    Using the OWASP Mutillidae II application and the Burp Clickbandit,
    let's determine whether the application protects against Clickjacking attacks.


How to do it...

    1=  Navigate to the Home page of the OWASP Mutillidae II.

    2=  Switch to Burp, and from the top-level menu,
        select Burp Clickbandit:

    3=  A pop-up box explains the tool.
        Click the button entitled Copy Clickbandit to clipboard

    4=  Return to the Firefox browser, and press F12 to bring up
        the developer tools.
        From the developer tools menu,
        select Console, and look for the prompt at the bottom:

    5=  At the Console prompt (for example, >>),
        paste into the prompt the Clickbandit script you copied to your clipboard:

    6=  After pasting in the script into the prompt,
        press the Enter key.
        You should see the Burp Clickbandit Record mode.
        Click the Start button to begin:

    7=  Start clicking around on the application after it
        appears.
        Click available links at the top Mutillidae menu, click available links on the side menu, or browse to pages
        within Mutillidae.
        Once you've clicked around,
        press the Finish button on the Burp Clickbandit menu.

    8=  You should notice big red blocks appear transparently on
        top of the Mutillidae web pages.
        Each red block indicates a place where a malicious iframe can appear.
        Feel free to click each red block to see the next red block appear, and so on:

    9=  Once you wish to stop and save your results,
        click the Save button.
        This will save the Clickjacking PoC in an HTML file for you to place inside your penetration test report.


How it works...

    Since the Mutillidae application does not make use of the
    X-FRAME-OPTIONS header set to DENY, it is possible to inject
    a malicious iframe in to the Mutillidae web pages.
    The Clickbandit increases the level of opaqueness of the iframe for visibility and creates a proof of concept (PoC) to illustrate how the vulnerability can be exploited.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for DOM-based cross-site scripting

The Document Object Model (DOM) is a tree-like structural representation of all HTML web pages captured in a browser.

Developers use the DOM to store information inside the browser for convenience.
As a web penetration tester, it is important to determine the presence of DOM-based cross-site scripting (XSS) vulnerabilities.


Getting ready

    Using OWASP Mutillidae II HTML5 web storage exercise,
    let’s determine whether the application is susceptible to DOM-based XSS attacks.


    1=  Navigate toOWASP 2013 | HTML5 Web Storage | HTML5
        Storage:

    2=  Note the name/value pairs stored in the DOM using HTML5
        Web Storage locations.
        Web storage includes Session and Local variables.
        Developers use these storage locations to conveniently store information inside a user's browser:

    3=  Switch to the Burp Proxy Intercept tab.
        Turn Interceptor on with the button Intercept is on.

    4=  Reload the HTML 5 Web Storage page in Firefox browser by
        pressing F5 or clicking the reload button.

    5=  Switch to the Burp Proxy HTTP history tab.
        Find the paused request created by the reload you just performed.
        Note that the User-Agent string is highlighted, as shown in the following screenshot:
            User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:72.0) Gecko/20100101 Firefox/72.0

    6=  Replace the preceding highlighted User-Agent with the
        following script:
            <script>try{var m = "";var l = window.localStorage; var s = window.sessionStorage;for(i=0;i<l.length;i++){var lKey = l.key(i);m += lKey + "=" + l.getItem(lKey) + ";\n";};for(i=0;i<s.length;i++){var lKey = s.key(i);m += lKey + "=" + s.getItem(lKey) + ";\n";};alert(m);}catch(e){alert(e.message);}</script>



How it works...

    The injected script illustrates how the presence of a cross-site scripting vulnerability combined with sensitive
    information stored in the DOM can allow an attacker to steal sensitive data.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


Testing for JavaScript execution


JavaScript injection is a subtype of cross-site scripting attacks specific to the arbitrary injection of JavaScript. Vulnerabilities in this area can affect sensitive information held in the browser, such as user session cookies, or it can lead to the modification of page content, allowing script execution from attacker-controlled sites.


Getting ready

    Using the OWASP Mutillidae II Password Generator exercise, let’s determine whether the application is susceptible to JavaScript XSS attacks.


How to do it...

    1=  Navigate to OWASP 2013 | A1 – Injection (Other) |
        JavaScript Injection | Password Generator:

    2=  Note after clicking the Generate Password button, a
        password is shown.
        Also, note the username value provided in the URL is
        reflected back as is on the web page: http://192.168.56.101/mutillidae/index.php?page=password-generator.php&username=anonymous.
        This means a potential XSS vulnerability may exist on the page:

    3=  Switch to the Burp Proxy HTTP history tab and find the
        HTTP message associated with the Password Generator page.
        Flip to the Response tab in the message editor, and perform a search on the string catch.
        Note that the JavaScript returned has a catch block where error
        messages display to the user.
        We will use this position for the placement of a carefully crafted JavaScript injection attack:

    4=  Switch to the Burp Proxy Intercept tab.
        Turn Interceptor on with the button Intercept is on.

    5=  Reload the Password Generator page in Firefox browser by
        pressing F5 or clicking the reload button.

    6=  Switch to the Burp Proxy Interceptor tab.
        While the request is paused, note the username parameter value highlighted as follows:

            GET /mutillidae/index.php?page=password-generator.php&username=anonymous HTTP/1.1

    7=  Replace the preceding highlighted value of anonymous
        with the following carefully crafted JavaScript injection script:
            canary";}catch(e){}alert(1);try{a="

    8=  Click the Forward button.
        Now, turn Interceptor off by clicking the toggle button to Intercept is off.

    9=  Note the alert popup.
        You’ve successfully demonstrated the presence of a JavaScript injection XSS vulnerability!


How it works...

    The JavaScript snippet injected into the web page matched the structure of the original catch statement.

    By creating a fake name of canary and ending the statement with a semicolon, a specially crafted new catch block was
    created,
        which contained the malicious JavaScript payload.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for HTML injection

HTML injection is the insertion of arbitrary HTML code into a vulnerable web page.
Vulnerabilities in this area may lead to the disclosure of sensitive information or the modification of page content for the purposes of socially engineering the user.


Getting ready

    Using the OWASP Mutillidae II Capture Data Page, let's determine whether the application is susceptible to HTML injection attacks.


How to do it...

    1=  Navigate to OWASP 2013 | A1 – Injection (Other) | HTMLi
        Via Cookie Injection | Capture Data Page:

    2=  Note how the page looks before the attack:

    3=  Switch to the Burp Proxy Intercept tab,
        and turn Interceptor on with the button Intercept is on.

    4=  While the request is paused,
        make note of the last cookie, acgroupswitchpersist=nada:

    5=  While the request is paused,
        replace the value of the last cookie, with this HTML injection script:
        <h1>Sorry, please login again</h1>
        <br/>Username<input type="text">
        <br/>Password<input type="text">
        <br/><input type="submit" value="Submit">
        <h1>&nbsp;</h1>

        Cookie: showhints=1;
        PHPSESSID=7cb6528fd958a05d98976c4f65347689
        &<h1>Sorry, please login again</h1>
        <br/>Username<input type="text">
        <br/>Password<input type="text">
        <br/><input type="submit" value="Submit"><h1>&nbsp;</h1>

        Sorry, please login again

                Username
                Password

    6=  Click the Forward button.
        Now turn Interceptor off by clicking the toggle button to Intercept is off.

    7=  Note how the HTML is now included inside the page!


How it works...

    Due to the lack of input validation and output encoding, an HTML injection vulnerability can exist.
    The result of exploiting this vulnerability is the insertion of arbitrary HTML code,
    which can lead to XSS attacks or social engineering schemes such as the one seen in the preceding recipe.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Testing for client-side resource manipulation

If an application performs actions based on client-side URL information or pathing to a resource
(that is, AJAX call, external JavaScript, iframe source),
the result can lead to a client-side resource manipulation vulnerability.
This vulnerability relates to attacker-controlled URLs in,
for example,
    the JavaScript location attribute, the location header found in an HTTP response, or a POST body parameter, which controls redirection.
The impact of this vulnerability could lead(dirigir) to a cross-site scripting attack.


Getting ready

    Using the OWASP Mutillidae II application, determine whether it is possible to manipulate any URL parameters that are
    exposed on the client side and whether the manipulation of those values causes the application to behave differently.

How to do it...

    1=  Navigate to OWASP 2013 | A10 – Unvalidated Redirects and
        Forwards | Credits:

    2=  Click the ISSA Kentuckiana link available on the Credits
        page:

    3=  Switch to the Burp Proxy HTTP history tab,
        and find your request to the Credits page.
        Note that there are two query string parameters:
        page and forwardurl.
        What would happen if we manipulated the URL where the user is sent?

    4=  Switch to the Burp Proxy Intercept tab.
        Turn Interceptor on with the button Intercept is on.

    5=  While the request is paused,
        note the current value of the fowardurl parameter:
            GET /mutillidae/index.php?page=redirectandlog.php&forwardurl=http://www.issa-kentuckiana.org HTTP/1.1

    6=  Replace the value of the forwardurl parameter to be
        https://www.owasp.org instead of the original choice of http://www.issa-kentuckiana.org:

        GET /mutillidae/index.php?page=redirectandlog.php&forwardurl=https://www.owasp.org HTTP/1.1

    7=  Click the Forward button. Now turn Interceptor off by
        clicking the toggle button to Intercept is off.

    8=  Note how we were redirected to a site other than the one
        originally clicked!
            https://www.owasp.org/index.php/Main_Page


How it works...

    Application code decisions, such as where to redirect a user, should never rely on client-side available values.
    Such values can be tampered with and modified, to redirect users to attacker-controlled websites or to execute attacker-controlled scripts.
